"""
Django settings for track_locator project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
import json
import glob
import re
from packaging.version import Version
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# initialise environ
env = environ.Env()

# Check if running in Kubernetes
RUNNING_IN_KUBERNETES = os.getenv("KUBERNETES_SERVICE_HOST") is not None
# If running in Kubernetes, read the config from mounted volume
if RUNNING_IN_KUBERNETES:
    # This is where your config map is mounted
    config_dir = Path('/code/config')

    # Read the values from the config files in the mounted directory
    DEBUG = open(config_dir / 'DEBUG').read().strip() == 'True'
    ALLOWED_HOSTS = open(
        config_dir / 'DJANGO_ALLOWED_HOSTS').read().strip().split(",")
    CSRF_TRUSTED_ORIGINS = open(
        config_dir / 'CSRF_TRUSTED_ORIGINS').read().strip().split(",")
    SQL_ENGINE = open(config_dir / 'SQL_ENGINE').read().strip()
    SQL_DATABASE = open(config_dir / 'SQL_DATABASE').read().strip()
    SQL_USER = open(config_dir / 'SQL_USER').read().strip()
    SQL_HOST = open(config_dir / 'SQL_HOST').read().strip()
    SQL_PORT = open(config_dir / 'SQL_PORT').read().strip()
    APP_DOMAIN = open(config_dir / 'APP_DOMAIN').read().strip()

    # Get actual environment variable names from deployment pointers
    sql_password_env = os.getenv(
        "DJANGO_SQL_PASSWORD_ENV_VAR_NAME", "SQL_PASSWORD")
    secret_key_env = os.getenv(
        "DJANGO_SECRET_KEY_ENV_VAR_NAME", "DJANGO_SECRET_KEY")
    # the real values
    SECRET_KEY = os.getenv(secret_key_env)
    PASSWORD = os.getenv(sql_password_env)

# check if deployment is in docker swarm
elif os.getenv('RUNNING_IN_DOCKER_STACK') == 'true':
    def load_json_vars(path):
        # function to load variables from secrets and config files
        try:
            with open(path) as f:
                return json.load(f)
        except FileNotFoundError:
            return {}

    def find_versioned_secret(prefix):
        matches = glob.glob(f'/run/secrets/{prefix}_*')
        versioned_matches = []
        for match in matches:
            # Extract version from file name
            m = re.search(f'{prefix}_(.+)$', match)
            if m:
                try:
                    # Use packaging.version for semver
                    version = Version(m.group(1))
                    versioned_matches.append((version, match))
                except:
                    continue  # skip invalid version strings
        if versioned_matches:
            # Pick the highest semantic version
            return sorted(versioned_matches, reverse=True)[0][1]
        # Fallback to non-versioned secret
        fallback = f'/run/secrets/{prefix}'
        return fallback if os.path.exists(fallback) else None

    def read_secret(prefix, default=''):
        path = find_versioned_secret(prefix)
        if path and os.path.exists(path):
            with open(path) as f:
                return f.read().strip()
        return default

    CONFIG_PATH = '/run/configs/django_config.json'
    cfg = load_json_vars(CONFIG_PATH)

    DEBUG = cfg.get("DEBUG", False)
    ALLOWED_HOSTS = cfg.get("DJANGO_ALLOWED_HOSTS", ["localhost"])
    CSRF_TRUSTED_ORIGINS = cfg.get("CSRF_TRUSTED_ORIGINS", [])
    SQL_ENGINE = cfg.get('SQL_ENGINE', 'django.db.backends.postgresql')
    SQL_DATABASE = cfg.get('SQL_DATABASE', BASE_DIR/'db.sqlite3')
    SQL_USER = cfg.get('SQL_USER', '')
    SQL_HOST = cfg.get('SQL_HOST', '')
    SQL_PORT = cfg.get('SQL_PORT', '5432')
    APP_DOMAIN = cfg.get("APP_DOMAIN", "http://localhost:8000")
    SECRET_KEY = read_secret('DJANGO_SECRET_KEY', '')
    PASSWORD = read_secret('SQL_PASSWORD', '')

else:
    # if in development, Load environment variables from the local .env file
    env_file_path = Path(__file__).resolve().parent.parent / '.env'
    env.read_env(env_file_path, overwrite=True)

    DEBUG = env('DEBUG', default='False')
    ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS', default=['127.0.0.1'])
    CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS'),
    SECRET_KEY = env('SECRET_KEY')
    SQL_ENGINE = env('SQL_ENGINE', default='django.db.backends.postgresql')
    SQL_DATABASE = str(env('SQL_DATABASE', default=BASE_DIR / 'db.sqlite3'))
    SQL_USER = env('SQL_USER', default='')
    SQL_HOST = env('SQL_HOST', default='')
    PASSWORD = env('SQL_PASSWORD', default='')
    SQL_PORT = env('SQL_PORT', default='5432')
    APP_DOMAIN = env('APP_DOMAIN', default='http://localhost:8000')

    print(f"Allowed hosts are {ALLOWED_HOSTS}")
    print(f"the env file path is {env_file_path}")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'corsheaders',
    'locator.apps.LocatorConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'track_locator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",  # Global templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'track_locator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': SQL_ENGINE,
        'NAME': SQL_DATABASE,
        'USER': SQL_USER,
        'PASSWORD': PASSWORD,
        'HOST': SQL_HOST,
        'PORT': SQL_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Global shared static files directory (optional)
]
# Directory where collected static files will be stored
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = "locator.LocAppUser"

# Redirect to home URL after login
LOGIN_REDIRECT_URL = 'after_login'

# allow cross-origin resource sharing
# CORS_ALLOWED_ORIGINS = []
CORS_ALLOW_ALL_ORIGINS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# CORS_ALLOW_HEADERS = ['X-Cordova-App', 'content-type']
CORS_ALLOW_HEADERS = list(default_headers) + [
    'Authorization',
    'X-Cordova-App',
]

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",
#     "file://",  # Cordova file origin
# ]

# Automatically log out user after 10minutes of inactivity
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 600
